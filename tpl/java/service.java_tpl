package $loader.namespaces.java;

/**
 * This file is auto-generated by trpcgen
 * Don't change manually
 */

import android.content.Context;
import android.util.Log;

import com.android.volley.Request;
import com.android.volley.RequestQueue;
import com.android.volley.Response;
import com.android.volley.Response.Listener;
import com.android.volley.VolleyError;
import com.android.volley.toolbox.Volley;
import com.daigou.sg.rpc.RpcRequest;
import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;

import org.json.JSONException;
import org.json.JSONObject;

import java.lang.reflect.Type;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.HashMap;

public class $(obj.get_name)Service {
    private static final Gson gson = new Gson();
    private static String ServiceUrl;
    private static int msgID = 1;
    private static RequestQueue queue;

    private $(obj.get_name)Service() {
        // Constructor hidden because this is a singleton
    }

    public static void init(Context queueContext, String serviceUrl) {
        ServiceUrl = serviceUrl;
        queue = Volley.newRequestQueue(queueContext);
    }

    private static String getMsgID() {
        msgID += 1;
        return Integer.toString(msgID);
    }

#for func in $obj.functions
    public static void $(func.name)($func.get_java_params) {
        RpcRequest req = new RpcRequest(Request.Method.POST, ServiceUrl,
                new Response.Listener<JSONObject>() {
                    @Override
                    public void onResponse(JSONObject jsonObject) {
                        #if $func.get_java_return_type != "void"
                        try {
                            $func.get_java_return_type result;

                            #if $func.get_java_return_type == "String"
                            result = jsonObject.getString("result");
                            #else if $func.get_java_return_type.startswith("java.util.ArrayList")
                            Type listType = new TypeToken<$func.get_java_return_type>() {
                            }.getType();
                            result = gson.fromJson(jsonObject.getJSONArray("result").toString(), listType);
                            #else
                            Type listType = new TypeToken<$func.get_java_return_type>() {
                            }.getType();
                            result = gson.fromJson(jsonObject.getJSONObject("result").toString(), listType);
                            #end if
                            listener.onResponse(result);
                        } catch (JSONException ex) {
                            Log.d("ex", ex.toString());
                            Log.d("jsonObject", jsonObject.toString());
                            listener.onResponse(null);
                        }
                        #end if
                    }
                }, new Response.ErrorListener() {
            @Override
            public void onErrorResponse(VolleyError error) {
                #if $func.get_java_return_type != "void"
                listener.onResponse(null);
                #end if
            }
        }) {
            @Override
            public byte[] getBody() {
                final ArrayList<Object> params = new ArrayList<Object>();
                HashMap<String, Object> msg = new HashMap<String, Object>();
                #for p in $func.arguments
                params.add($p.name);
                #end for

                msg.put("id", getMsgID());
                msg.put("method", "$(obj.get_name).$(func.name)");
                msg.put("params", params);

                return gson.toJson(msg).getBytes(Charset.forName("UTF-8"));
            }
        };
        queue.add(req);
    }

#end for
}
