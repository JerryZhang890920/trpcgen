//
// This file is auto-generated by trpcgen
// Don't change manually
//

\#import "$(obj.get_name).h"

@implementation $(loader.namespaces.objc)$obj.get_name[1:]

+($(loader.namespaces.objc)$obj.get_name[1:] *)fromJSON:(id)responseObject
{
	$(loader.namespaces.objc)$obj.get_name[1:] *result = [[$(loader.namespaces.objc)$obj.get_name[1:] alloc] init];

    #for field in $obj.fields
    #if str($field.type) == "i32"
    result.$(field.name.value) = [[responseObject objectForKey:@"$(field.name.value)"] intValue];
    #else if str($field.type) == "double"
    result.$(field.name.value) = [[responseObject objectForKey:@"$(field.name.value)"] doubleValue];
    #else if str($field.type) == "bool"
    result.$(field.name.value) = [[responseObject objectForKey:@"$(field.name.value)"] boolValue];
    #else if str($field.type) in $obj.extra_struct 
    result.$(field.name.value) = [$(loader.namespaces.objc)$(str($field.type)[1:]) fromJSON:responseObject];
    #else if str($field.type).startswith("list")
        #if str($field.type)[5:-1] in $obj.extra_struct
        result.$(field.name.value) = [$(loader.namespaces.objc)$($field.inner_type_java[1:]) fromJSONArray:responseObject];
        #else
        result.$(field.name.value) = [responseObject array][$($field.inner_type_java)];
        #end if
    #else 
    result.$(field.name.value) = [responseObject objectForKey:@"$(field.name.value)"];
    #end if
    #end for

	return result;
}

+(NSArray *)fromJSONArray:(id)responseObject
{
    NSArray *data = (NSArray *)responseObject;
    NSUInteger limit = [data count];
    NSMutableArray *result = [[NSMutableArray alloc] init];

    for (int i = 0; i < limit; i++)
    {
        $(loader.namespaces.objc)$obj.get_name[1:] *item = [self fromJSON:[data objectAtIndex:i]];
        [result addObject:item];
    }

    return result;
}


-(NSMutableDictionary *)toDictionary
{
    NSMutableDictionary *resultDic = [[NSMutableDictionary alloc] init];

    #for field in $obj.fields
    #if str($field.type) in $obj.extra_struct
    [resultDic setValue:[self.$(field.name.value) toDictionary]       forKey:@"$(field.name.value)"];
    #else if str($field.type).startswith("list")

    #else
    [resultDic setValue:self.$(field.name.value)       forKey:@"$(field.name.value)"];
    #end if
    #end for
    
    return resultDic;
}
@end
